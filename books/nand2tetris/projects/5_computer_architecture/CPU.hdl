/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {
	IN inM[16],         // M value input  (M = contents of RAM[A])
		instruction[16], // Instruction for execution
		reset;           // Signals whether to re-start the current
						 // program (reset==1) or continue executing
						 // the current program (reset==0).

	OUT outM[16],        // M value output
		writeM,          // Write to M?
		addressM[15],    // Address in data memory (of M)
		pc[15];          // address of next instruction

	PARTS:
	And(a=instruction[15], b=instruction[4], out=regDLoad);
	DRegister(in=aluOut, load=regDLoad, out=regD);

	Not(in=instruction[15], out=aInstruction);
	Mux16(a=aluOut, b[15]=false, b[0..14]=instruction[0..14], sel=aInstruction, out=regACandidate);
	Or(a=aInstruction, b=instruction[5], out=regALoad);
	ARegister(in=regACandidate, load=regALoad, out=regA, out[0..14]=addressM);

	Mux16(a=regA, b=inM, sel=instruction[12], out=aluOp2);
	ALU(
		x=regD, y=aluOp2,
		zx=instruction[11], nx=instruction[10], zy=instruction[9],
		ny=instruction[8], f=instruction[7], no=instruction[6],
		out=aluOut,
		out=outM,
		zr=zr, ng=ng
	);
	Jump(eq=zr, lt=ng, instruction=instruction[0..2], out=jump);
	And(a=jump, b=instruction[15], out=pcJump);
	Not(in=pcJump, out=pcInc);
	PC(in=regA, inc=pcInc, load=pcJump, reset=reset, out[0..14]=pc);

	And(a=instruction[15], b=instruction[3], out=writeM);
}
