/**
 * Graphic screen library.
 */

class Screen{

	static int screenAddress;
	static bool color;

	/**
	 * Initializes the Screen.
	 */
	function void init(){
		let color = true;
		let screenAddress = 16384;
		return;
	}

	/**
	 * Erases the whole screen.
	 */
	function void clearScreen(){
		return;
	}

	/**
	 * Sets the color to be used in further draw commands
	 *  where white = false, black = true.
	 */
	function void setColor(boolean b){
		let color = b;
		return;
	}

	/**
	 * Draws the (x, y) pixel.
	 */
	function void drawPixel(int x, int y){
		var int xQuotient, bit, mask, address;
		let xQuotient = x / 16;
		let mask = 1;
		let bit = x - (xQuotient * 16);
		let address = (y * 32) + xQuotient;

		while(bit > 0){
			let mask = mask * 2;
			let bit = bit - 1;
		}

		if(color){
			let screenAddress[address] = screenAddress[address] | mask;
		}
		else {
			let screenAddress[address] = screenAddress[address] & (~mask);
		}
		return;
	}

	/**
	 * Draws a line from (x1, y1) to (x2, y2).
	 */
	function void drawLine(int x1, int y1, int x2, int y2){
		while(x1 < x2){
			do Screen.drawPixel(x1, y1);
			let x1 = x1 + 1;
		}
		return;
	}

	/**
	 * Draws a filled rectangle where the top left corner
	 *  is (x1, y1) and the bottom right corner is (x2, y2).
	 */
	function void drawRectangle(int x1, int y1, int x2, int y2){
		return;
	}

	/**
	 * Draws a filled circle of radius r around (cx, cy).
	 */
	function void drawCircle(int cx, int cy, int r){
		return;
	}
}
