/**
 * A basic math library.
 */
class Math {

	static Array bit_masks;

	/** Initializes the library. */
	function void init() {
		var int bit, mask;

		let bit_masks = Array.new(16);
		let bit = 0;
		let mask = 1;

		while(bit < 16){
			let bit_masks[bit] = mask;
			let mask = mask + mask;
			let bit = bit + 1;
		}

		return;
	}

	/** Returns the absolute value of x. */
	function int abs(int x) {
		if(x < 0){
			let x = -x;
		}
		return x;
	}

	function int getBit(int val, int bit){
		return val & bit_masks[bit];
	}

	/** Returns the product of x and y. */
	function int multiply(int x, int y) {
		var int product, bit;

		let product = 0;
		let bit = 0;
		while(bit < 16){
			if(Math.getBit(y, bit)){
				let product = product + x;
			}
			let x = x + x;
			let bit = bit + 1;
		}

		return product;
	}

	/** Returns the integer part of x/y. */
	function int divide(int x, int y){
		var int quotient;
		var bool negX, negY;
		let negX = x < 0;
		let negY = y < 0;

		if(negX){
			let x = -x;
		}

		if(negY){
			let y = -y;
		}

		let quotient = Math.dividePositive(x, y);

		if((negX | negY) & (~(negX & negY))){
			return -quotient;
		}
		else {
			return quotient;
		}
	}

	function int dividePositive(int x, int y){
		var int doubleQuotient;

		if(y > x){
			return 0;
		}

		let doubleQuotient = Math.divide(x, y * 2) * 2;
		if((x - (y * doubleQuotient)) < y){
			return doubleQuotient;
		}
		else {
			return doubleQuotient + 1;
		}
	}

	/** Returns the integer part of the square root of x. */
	function int sqrt(int x) {
		return 0;
	}

	/** Returns the greater number. */
	function int max(int a, int b) {
		if(a < b){
			return b;
		}
		else {
			return a;
		}
	}

	/** Returns the smaller number. */
	function int min(int a, int b) {
		if(a < b){
			return a;
		}
		else {
			return b;
		}
	}
}
